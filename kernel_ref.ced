
;******************************************************************************
;
;	Arquivo de Referência para o desenvolvimento do kernel.
;
;	Versão: 2021.2
;
;	Áreas de memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel para implementação dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel
;					*** CUIDADO! Esse vetor está no meio da área de código ***
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa vai fazer o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_RESET:		equ	_VETTAB+H0100
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0


;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
STACK:
		daw		[31]
IVET:	dw		0			; Vetor de interrupção

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programação do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		dw		_kbhit
		dw		_getchar
		dw		_putchar
		dw		_putmsg
		dw		_getclock
		dw		_setclock
		dw		_setalarm
		
;	
;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------
		org		_RESET
		
; 1) Desabilitar o sistema de interrupções
		clr	INTE

; 2) Inicializar o stack pointer (SP = R6)
		mov		#H7FFF,r6

; 3) Inicializar as variáveis internas usadas pelo sistema de interrupções e periféricos (IVET, INTE, etc.)
	;depois
	
; 4) Inicializar as variáveis internas do kernel
	;depois
	
; 5) Inicializar o teclado zerando o byte de estado (TECST, endereço 65498)
		clr 	TECST

; 6) Inicializar o timer
		mov #250, TIMDT


; 7) Limpar o visor
		;mov		#VISOR,POSICAO		; POSICAO = VISOR
		jsr		r7,_clear_display
; 8) Habilitar interrupções
		;mov		#h81,INTE			;por hora, apenas interrupções de timer
; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória
		jmp		_APP

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_kbhit:
	CMP 65498,#H80
	BNE _kbhit_not_pressed

	_kbhit_pressed:

		MOV #0, R0
		BR _kbhit_end

	_kbhit_not_pressed:

		MOV #1, R0

	_kbhit_end:

		RTS R7		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
;
_getchar:
	_inicio_getchar:
		MOV #65498,R0

	_teste_getchar:
		CLR (R0)
		JSR R7,_kbhit


	CMP R0, #0
	BNE _teste_getchar

	MOV TECDT, R0
	CLR TECDT

	RTS R7
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

_putchar:
	MOV _putchar_position, R4
	MOV R5, (R4)
	RTS R7
;	

;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_putmsg:
		rts		r7
	
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_getclock:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_setclock:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
_setalarm:
		rts		r7



;variaveis do putchar
_putchar_position:	dw	65500


;coisas recicladas do tecbuf
POSICAO:	dw		0		; Endereço no visor da posição atual onde o 'A' está aparecendo

ptIn:		dw		0
ptOut:		dw		0
TEC_BUFFER:	dab		[32]

; Limpa o visor
_clear_display:
		mov		#VISOR,r0
_clear_display_loop:
		mov		#' ',(r0)
		inc		r0
		bne		_clear_display_loop
		rts		r7



org _APP

JSR R7,_getchar
MOV R0, R5
JSR R7,_putchar
;MOV R5, 65500

BR _APP

HLT